class Solution {
public:
    int myAtoi(string str) {
        if(str.empty())
            return 0;

        int len = str.length(), i = 0, sign = 1;

        while(i < len && str[i] == ' ')
            i++;

        if(i == len)
            return 0;
    
        if(str[i] == '-') {
            sign = -1;
            i++;
        } else if(str[i] == '+') {
            i++;
        }
        
        long out = 0;
    
        while(i < len && str[i] >= '0' && str[i] <= '9') {
            int digit = str[i] - '0';

            if(out > (LONG_MAX - digit) / 10) {
                return sign == 1 ? INT_MAX : INT_MIN;
            }

            out = out * 10 + digit;
            i++;
        }
        out = sign * out;
        if(out <= INT_MIN)
            return INT_MIN;
        if(out >= INT_MAX)
            return INT_MAX;
        
        return static_cast<int>(out);
    }
};

Approach:

Skip leading whitespace
Handle sign (+ or -)
Convert digits to integer, building result
Apply sign
Check for overflow/underflow

Time complexity: O(n)
Space complexity: O(1)

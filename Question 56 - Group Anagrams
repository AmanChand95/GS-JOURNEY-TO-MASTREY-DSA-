class Solution {
public:
vector<vector<string>> groupAnagrams(vector<string>& strs) {
    vector<vector<string>> ans;
    unordered_map<string, vector<string>> umap;
    for (auto x : strs) {
        string temp = x;
        sort(x.begin(), x.end());
        umap[x].push_back(temp);
    }

    for (auto x : umap) {
        ans.push_back(x.second);
    }

    return ans;
   }
};

Approach:
Create an unordered map umap to store the sorted version of each string as the key and the original strings as the value. Iterate through the input vector strs: Sort the current string x to get its canonical representation.
Add the original string temp to the vector associated with the sorted string key in umap. Iterate through umap and add the value vectors (containing the anagrams) to the final result ans. Return the result ans.

Time complexity: O(N * M * log(M))
Space complexity: O(N * M)

#include<iostream>
using namespace std;

class Node
{
    public:
        int data;
        Node *next;

        Node()
        {
            this->next = NULL;
        }

        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
};

void printLL(Node* head)
{
    Node* temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << endl;    
}

int getLength(Node* head)
{
    Node* temp = head;
    int count = 0;
    while (temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    return count;
}

void insertAtHead(Node* &head, Node* &tail, int data)
{
    if(head == NULL){
        Node* newNode = new Node(data);
        head = newNode;
        tail = newNode;
    }
    else{
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }
}

void insertAtTail(Node* &head, Node* &tail, int data)
{
    if(head == NULL){
        Node* newNode = new Node(data);
        head = newNode;
        tail = newNode;
    }
    else{
        Node* newNode = new Node(data);
        tail->next = newNode;
        tail = newNode;
    }
}

void insertAtAnyPosition(Node* &head, Node* &tail, int data, int position)
{
    int length = getLength(head);
    
    if(position >= 1){
        insertAtHead(head, tail, data);
    }
    else if(position > length){
        insertAtTail(head, tail, data);
    }
    else{
        Node* newNode = new Node(data);
        Node* prev = NULL;
        Node* curr = head;
        while (position != 1)
        {
            prev = curr;
            curr = curr->next;
            position--;
        }
        prev->next = newNode;
        newNode->next = curr;
    }   
}

void deletefromHead(Node* &head, Node* &tail)
{    
    if(head == NULL){ 
        cout << "Can't delete, because of empty linked list" << endl;
        return;
    }
    if(head == tail){ 
        Node* temp = head;
        delete temp;
        head->next = NULL;
        tail->next = NULL;
        return;
    }
    Node* temp = head;
    head = temp->next;
    temp->next = NULL;
    delete temp;
}

void deleteFromTail(Node* head, Node* tail){
    if(head == NULL){ 
        cout << "Can't delete, because of empty linked list" << endl;
        return;
    }
    if(head == tail){ 
        Node* temp = head;
        delete temp;
        head->next = NULL;
        tail->next = NULL;
    }
    Node* prev = head;
    while (prev->next != tail)
    {
        prev = prev->next;
    }
    prev->next = NULL;
    delete tail;
    tail = prev;    
}

void deleteFromPosition(Node* &head, Node* &tail, int position){
    if(head == NULL){ 
        cout << "Can't delete, because of empty linked list" << endl;
        return;
    }
    if(head == tail){ 
        Node* temp = head;
        delete temp;
        head->next = NULL;
        tail->next = NULL;
    }
    if(position == 1){
        deletefromHead(head, tail);
    }
    else if (position == getLength(head))
    {
        deleteFromTail(head, tail);
    }
    else{
        Node* prev = NULL;
        Node* curr = head;
        while (position != 1)
        {
            prev = curr;
            curr = curr->next;
            position--;
        }
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }  
}

int main()
{
    Node* head = NULL;
    Node* tail = NULL;
    insertAtTail(head,tail,10);
    insertAtTail(head,tail,20);
    insertAtTail(head,tail,30);
    insertAtTail(head,tail,40);
    insertAtTail(head,tail,50);
    printLL(head);
    deleteFromPosition(head, tail,1);
    printLL(head);
    return 0;
}
